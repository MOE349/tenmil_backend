from django.db import models

from configurations.base_features.db.base_model import BaseModel
from tenant_users.models import TenantUser as User

from django.contrib.contenttypes.fields import GenericForeignKey
from django.contrib.contenttypes.models import ContentType


class WorkOrderStatusNames(BaseModel):
    name = models.CharField(max_length=50, unique=True)
    control = models.ForeignKey("core.WorkOrderStatusControls", on_delete=models.CASCADE)
    is_system_level = models.BooleanField(default=False)


class MaintenanceType(BaseModel):
    name = models.CharField(max_length=50, unique=True)
    hlmtype = models.ForeignKey("core.HighLevelMaintenanceType", on_delete=models.CASCADE)
    is_system_level = models.BooleanField(default=False)

    class Meta:
        verbose_name = "Maintenance Type"
        verbose_name_plural = "Maintenance Types"


class Priority(BaseModel):
    name = models.CharField(max_length=50, unique=True)
    is_system_level = models.BooleanField(default=False)

    class Meta:
        verbose_name = "Priority"
        verbose_name_plural = "Priorities"


class WorkOrder(BaseModel):
    code = models.CharField(max_length=50, unique=True, null=True, blank=True)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.UUIDField()
    asset = GenericForeignKey("content_type", "object_id")
    status = models.ForeignKey(WorkOrderStatusNames, on_delete=models.PROTECT)
    maint_type = models.ForeignKey(MaintenanceType, on_delete=models.PROTECT, null=True, blank=True)
    priority = models.ForeignKey(Priority, on_delete=models.PROTECT, null=True, blank=True)
    suggested_start_date = models.DateField(null=True, blank=True)
    completion_end_date = models.DateField(null=True, blank=True)
    suggested_completion_date = models.DateField(null=True, blank=True)
    description = models.TextField(null=True, blank=True)
    is_closed = models.BooleanField(default=False)
    is_pm_generated = models.BooleanField(default=False, help_text="True if this work order was generated by the PM automation system (manual or automatic)")
    is_reopened = models.BooleanField(default=False)
    completion_meter_reading = models.IntegerField(null=True, blank=True)
    trigger_meter_reading = models.IntegerField(null=True, blank=True)

    def save(self, *args, force_insert=False, force_update=False, using=None, update_fields=None):
        if not self.code:
            self.code = self.generate_unique_code()
        return super().save(*args, force_insert=force_insert, force_update=force_update, using=using, update_fields=update_fields)
    
    def generate_unique_code(self):
        """Generate a unique work order code with retry logic"""
        from django.db import transaction
        import time
        import re
        
        max_attempts = 10
        for attempt in range(max_attempts):
            try:
                with transaction.atomic():
                    # Get all existing WO codes and find the highest number
                    existing_codes = WorkOrder.objects.filter(
                        code__startswith='WO_'
                    ).values_list('code', flat=True)
                    
                    max_number = 0
                    for code in existing_codes:
                        match = re.match(r'WO_(\d+)$', code)
                        if match:
                            number = int(match.group(1))
                            max_number = max(max_number, number)
                    
                    next_number = max_number + 1
                    code = f"WO_{next_number}"
                    
                    # Double-check uniqueness before returning
                    if not WorkOrder.objects.filter(code=code).exists():
                        return code
                        
            except Exception:
                pass
            
            # If we get here, there was a conflict. Wait a bit and retry
            time.sleep(0.01 * (attempt + 1))  # Exponential backoff
        
        # Final fallback: use timestamp-based code if all attempts fail
        import datetime
        timestamp = datetime.datetime.now().strftime('%Y%m%d%H%M%S%f')[:-3]
        return f"WO_{timestamp}"
    

class WorkOrderChecklist(BaseModel):
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE)
    description = models.TextField(null=True, blank=True)    
    completed_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name="WorkOrderChecklist_CompletedBy", null=True, blank=True)
    completion_date = models.DateTimeField(null=True, blank=True)
    hrs_spent = models.IntegerField(null=True, blank=True)
    is_backlog = models.BooleanField(default=False)
    
    # New field to track source PM iteration checklist
    source_pm_iteration_checklist = models.ForeignKey(
        'pm_automation.PMIterationChecklist', 
        on_delete=models.SET_NULL, 
        null=True, 
        blank=True,
        related_name='work_order_checklists'
    )
    is_custom = models.BooleanField(default=False, help_text="True if this is a custom checklist item added by user")
    
    class Meta:
        indexes = [
            models.Index(fields=['work_order']),
            models.Index(fields=['work_order', 'source_pm_iteration_checklist']),
            models.Index(fields=['is_custom']),
        ]


class WorkOrderMiscCost(BaseModel):
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE)
    total_cost = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()


class WorkOrderLog(BaseModel):
    class LogTypeChoices(models.TextChoices):
        CREATED = 'Created'
        REOPENED = "Reopened"
        UPDATED = 'Updated'
        COMPLETED = 'Closed'
        CANCELLED = 'Cancelled'
    work_order = models.ForeignKey(WorkOrder, on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    amount = models.DecimalField(max_digits=10, decimal_places=2)
    description = models.TextField()
    log_type = models.CharField(max_length=50, choices=LogTypeChoices.choices)


class WorkOrderCompletionNote(BaseModel):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    work_order = models.OneToOneField(WorkOrder, on_delete=models.CASCADE)
    completion_notes = models.TextField(null=True, blank=True)
    problem = models.TextField(null=True, blank=True)
    root_cause = models.TextField(null=True, blank=True)
    solution = models.TextField(null=True, blank=True)
    admin_notes = models.TextField(null=True, blank=True)

